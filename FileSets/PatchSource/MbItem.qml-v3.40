import QtQuick 1.1
import com.victron.velib 1.0
import "utils.js" as Utils

/*
 * The MbItem serves as a base object for Items which can be placed in
 * the menubrowser (Mb), see MbPage. It adds default functions for key
 * behavior, icons, subpage navigtation and only shows a default
 * background. Any derived mb Item can fill it to its desire.
 */
Item {
	id: root
	width: (parent ? parent.width : 0)
	height: defaultHeight
	property bool show: user.accessLevel >= showAccessLevel

////// GuiMods — DarkMode
	property VBusItem darkModeItem: VBusItem { bind: "com.victronenergy.settings/Settings/Gui/ColorScheme" }
	property bool darkMode: darkModeItem.valid && darkModeItem.value == 0

	property int defaultHeight: style.itemHeight

	property bool editMode
	property variant toolbarHandler: editMode ? editToolbarHandler : navToolBar
	property alias navigationHandler: navToolBar

	property bool isCurrentItem: root.ListView.isCurrentItem
	property MbStyle style: MbStyle { isCurrentItem: root.ListView.isCurrentItem }

	// Navigation for subpages
	property bool hasSubpage: subpage !== undefined
	property variant subpage
	property variant _subpageInstance

	property bool cornerMark: false

	property int showAccessLevel: User.AccessUser
	property int writeAccessLevel: User.AccessInstaller
	property bool userHasWriteAccess: user.accessLevel >= writeAccessLevel
	property bool editable: true
	property alias backgroundColor: background.color

	// NOTE: this is added to our 4.8 qt version. Uncomment this line to run on a
	// vanilla QT. But optional rows are then always visible.
	//property bool show

	signal selected
	signal clicked

	ToolbarHandler {
		id: editToolbarHandler

		leftIcon: "icon-toolbar-cancel"
		rightIcon: "icon-toolbar-ok"

		function leftAction()
		{
			cancel()
		}

		function rightAction()
		{
			save()
		}
	}

	ToolbarHandlerMbItems {
		id: navToolBar
		isDefault: true
	}

	function open() {
		if (pageStack.currentPage.active && hasSubpage)
			_subpageInstance = pageStack.push(subpage);
	}

	function edit(isMouse) {
	}

	function cancel() {
	}

	function save() {
	}

	function select() {
		if (!pageStack)
			return

		// Note: Getting the index from the model depends on the model type.
		// So lets asked the listview for our index instead.
		var n = pageStack.currentPage.listview.indexAt(root.x, root.y)
		if (n < 0)
			return
		pageStack.currentPage.currentIndex = n

		if (!userHasWriteAccess && !hasSubpage && editable)
			 toast.createToast(qsTr("Setting locked for \"user\" access level."), 3000, "icon-lock-active");
		root.selected()
	}

	Rectangle {
		id: background
		anchors.fill: parent
		color: showAccessLevel >= User.AccessSuperUser ? style.backgroundColorService : style.backgroundColor
	}

	MbIcon {
		id: cornerMarkIcon

////// GuiMods — DarkMode
		iconId: "icon-items-corner" + (root.ListView.isCurrentItem || darkMode ? "-active" : "")
		visible: cornerMark
		anchors {
			right: parent.right; rightMargin: 1
			bottom: bottomBorder.top; bottomMargin: 1
		}
	}

	Rectangle {
		id: bottomBorder
		width: root.width
		height: 1
		color: style.borderColor
		anchors.bottom: root.bottom
	}

	onIsCurrentItemChanged: {
		if (editMode)
			cancel()
	}

	Keys.onRightPressed: {
		if (userHasWriteAccess)
			root.clicked()
		if (!userHasWriteAccess && !hasSubpage)
			 toast.createToast(qsTr("Setting locked due to access level."), 3000, "icon-lock-active");
		else
			open()
	}

	function defaultCenterAction()
	{
		if (userHasWriteAccess)
			root.clicked()
		if (!userHasWriteAccess && !hasSubpage && editable) {
			toast.createToast(qsTr("Setting locked due to access level."), 3000, "icon-lock-active");
		} else {
			if (pageStack.currentPage.active && hasSubpage)
				open()
			else
				edit()
		}
	}

	function handleMouseClick(onItem) {
		if (hasSubpage && !onItem && editable) {
			// When clicking again an on item with a value and a submenu which is in edit mode,
			// since the value was pressed, then leave edit mode first instead of opening the
			// page while leaving the item in an edit state.
			if (editMode) {
				cancel()
			} else {
				select()
				open()
			}
		} else {
			if (!root.ListView.isCurrentItem) {
				select()
			} else {
				root.clicked()
				edit(true)
			}
		}
	}

	// If a submenu is opened with a dynamic model, the items can be destructed
	// while a subpage is in the pagestack. Since navigation will then get stuck,
	// do navigate out of the submenu in such a case.
	Component.onDestruction: {
		if (pageStack && _subpageInstance) {
			if (pageStack.find(function(page) {	return page === _subpageInstance; } ) !== null) {
				pageStack.pop(_subpageInstance)
			}
		}
	}

	MouseArea {
		id: mouseArea
		anchors.fill: parent
		onClicked: handleMouseClick()
	}
}
